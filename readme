Backend Challenge – Game Engine with User Simulator

A minimal, event-driven Go backend that simulates many users answering a game question concurrently, evaluates responses in real time, and announces a single winner. It also exposes simple metrics.

✨ Features

Game Engine (channel-driven): first correct submission wins (exactly once).

API Server: /submit, /winner, /metrics, /healthz.

Mock User Engine (optional): fire N concurrent, lagged submissions.

Metrics: totals for total, correct, incorrect, and winner_id.

🗂️ Project Layout
.
├── api_server/
│   └── server.go
├── game_engine/
│   └── game_engine.go
├── mock_api/
│   └── mock.go
└── main.go

🚀 How to Run
go run main.go


By default the API listens on :8080.
If your version supports flags, you can override: -port 9090, -run-mock=true, -n 1000, etc.

Check the server is up:

curl -s localhost:8080/healthz
# ok

🔌 API Endpoints
Health
curl -s localhost:8080/healthz

Metrics (before any submissions: zeros)
curl -s localhost:8080/metrics | jq


Example response

{
  "total": 0,
  "correct": 0,
  "incorrect": 0,
  "winner_id": 0
}

Submit a User Answer

Important: JSON uses lowercase field names. Use correct, not Correct.

curl --location 'localhost:8080/submit' \
  --header 'Content-Type: application/json' \
  --data '{
    "user_id": 112345,
    "correct": true
}'


Example response

{
  "queued_at": "2025-10-16T08:00:00Z",
  "status": "accepted"
}

Winner & Updated Metrics
# metrics reflect submissions
curl -s localhost:8080/metrics | jq

# winner (appears once a correct submission wins)
curl -s localhost:8080/winner | jq


Example winner response

{
  "found": true,
  "user_id": 112345
}

🧪 Quick End-to-End (Manual)

Start server: go run main.go

Verify health: curl -s localhost:8080/healthz

Check metrics: curl -s localhost:8080/metrics | jq

Submit answers (one or many) via /submit

Re-check /metrics and /winner

⚙️ Optional (Mock User Engine)

If your build includes the mock runner flags:

go run main.go -run-mock=true -n 1000 -min-lag-ms=10 -max-lag-ms=1000


This will generate 1k concurrent submissions with randomized lag and correctness, ensuring exactly one winner.

🧰 Troubleshooting

404 on /metrics
You’re likely running an older binary or a different server. Rebuild and rerun:

go clean -cache && go run main.go


Confirm health: curl -s localhost:8080/healthz

JSON field case
Make sure your body uses correct (lowercase). Example:

{"user_id": 1, "correct": true}


Port in use / wrong port
Change port: go run main.go -port 9090 and hit localhost:9090.

📑 Notes

Evaluation is real-time via channels; no batching.

Concurrency is safe: single consumer goroutine + atomics for winner/metrics.

Exactly one winner is declared; all subsequent correct answers are ignored.

Happy hacking! 🎮🚀
